#+title: Momento de In√©rcia
#+author: Prof. N√≠colas Morazotti
#+email: nicolas.morazotti@gmail.com
#+property: header-args:jupyter-python :session /home/nicolas/.local/share/jupyter/runtime/kernel-fd06e933-64cd-4a7c-b78a-41a65c52ca94.json
#+property: header-args:jupyter-python+ :eval never-export
#+language: br
#+latex_header: \usepackage[brazil]{babel}
#+latex_header: \usepackage{minted}
#+latex_header: \usepackage{tikz}
#+latex_header: \usepackage{svg}
#+latex_header: \usemintedstyle{emacs}
#+latex_header: \setminted[python]{framesep=1.5mm, linenos, firstnumber=last}
#+SETUPFILE: /home/nicolas/.config/emacs/macros/colors.org
#+options: H:2 ':t toc:nil timestamp:nil num:nil reveal_width:3840 reveal_height:2160 date:nil
:REVEAL_PROPERTIES:
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_THEME: blood 
#+REVEAL_REVEAL_JS_VERSION: 4
#+REVEAL_TITLE_SLIDE: <h2 class="title">%t</h2>
#+REVEAL_TITLE_SLIDE: <p class="subtitle"></p> <h3 class="author">%a</h3> <h3 class="email">%e</h3>
#+REVEAL_TITLE_SLIDE: <h3 class="date">%d</h3> 
# #+REVEAL_TITLE_SLIDE: <div id="org4eba3d0" class="figure"> <p><img src="../img/BlackGenn_Dark.png" alt="BlackGenn_Dark.png" width="500px" /> </p> </div>
#+REVEAL_MARGIN: 0.02
#+REVEAL_INIT_OPTIONS: slideNumber:"c/t"
#+REVEAL_MIN_SCALE: 0.5 
#+REVEAL_MAX_SCALE: 35 
#+REVEAL_EXTRA_CSS: custom.css
:END:
#+REVEAL_INIT_SCRIPT: <script> Reveal.on('ready', function() {if (window.MathJax) MathJax.typesetPromise();}); Reveal.on('slidechanged', function() {if (window.MathJax) MathJax.typesetPromise();}); </script>
#+REVEAL_MATHJAX_URL: https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js
#+REVEAL_MATHJAX: t
#+REVEAL_EXTRA_JS: https://cdn.plot.ly/plotly-latest.min.js
#+SETUPFILE: /home/nicolas/.config/emacs/macros/plotly.org
#+MACRO: plotly @@html:<div id="$1"></div><script> fetch("$2") .then(r => r.json()) .then(fig => {Plotly.newPlot("$1", fig.data, fig.layout, {frames: fig.frames || []}); if (window.MathJax) MathJax.typesetPromise();}); </script>@@

  #+begin_src jupyter-python :exports none
    import numpy as np
    import plotly.express as px
    import plotly.graph_objects as go
    import plotly.io as pio

    theta = np.linspace(0, np.pi/2, 100)
  #+end_src
* Introdu√ß√£o 

Hoje n√£o teremos v√≠deo do Universo Mec√¢nico üò¢

** Corpos r√≠gidos
- Corresponde a um conceito *{{{yellow(limite ideal)}}}*
- {{{yellow(Corpo indeform√°vel)}}}
- Dist√¢ncia entre duas part√≠culas do corpo √© constante ao longo do movimento
- Nenhum corpo √© perfeitamente r√≠gido

** Corpos r√≠gidos em Transla√ß√£o
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
[[file:../img/Itr8V4.png]]
- Diz-se que o movimento de um corpo r√≠gido √© de *transla√ß√£o* quando a
  dire√ß√£o de qualquer segmento que une dois pontos n√£o se altera
  durante o movimento

** Corpos r√≠gidos em Transla√ß√£o
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
[[file:../img/Itr8V4.png]]
- Todos os pontos sofrem o mesmo deslocamento no mesmo intervalo de
  tempo
- *Velocidade* e *acelera√ß√£o* de *transla√ß√£o* de um corpo r√≠gido
- Movimento √© *{{{yellow(equivalente)}}}* ao de um ponto material
** Corpos r√≠gidos em Rota√ß√£o
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
[[file:../img/giphy-2231556582.gif]]
** Corpos r√≠gidos em Rota√ß√£o
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
[[file:../img/corpo-rigido-rotacao.png]]
- Em contrapartida, podemos, em vez disso, fixarmos dois pontos \(A\)
  e \(B\) de um corpo r√≠gido, bem como todos os pontos da reta que
  passa por ambos
- Pontos fora de reta t√™m de manter sua dist√¢ncia a tal eixo constante
- \(\overline{AB}\) √© chamado {{{yellow(eixo de rota√ß√£o)}}}: todas as
  part√≠culas descrevem c√≠rclos com centro em tal eixo
- Giram *√¢ngulos* iguais em mesmo *intervalo de tempo*

** Corpos r√≠gidos em Rota√ß√£o
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
- Rota√ß√£o de um corpo r√≠gido: ponto material se move circularmente ao
  redor do eixo de rota√ß√£o
- √önica coordenada: *{{{yellow(√¢ngulo de rota√ß√£o)}}}*

* Transla√ß√£o e Rota√ß√£o de Corpos R√≠gidos
** Transla√ß√£o de Corpos R√≠gidos
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
- Por terem a mesma velocidade \(v\) de transla√ß√£o, definimos o
  /momentum/ \(p\) do sistema como \(p = Mv\)
- \(2^{\text{a}}\) lei de Newton:
  + {{{yellow(\(F = \frac{\mathrm{d}p}{\mathrm{d}t} = Ma\))}}}
  
** Transla√ß√£o de Corpos R√≠gidos
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:

- {{{yellow(\(F = \frac{\mathrm{d}p}{\mathrm{d}t} = Ma\))}}}
- Massa \(M\): in√©rcia \(\to\) dificuldade para alterar a quantidade de movimento do corpo
- Quanto maior a massa, maior a for√ßa necess√°ria para aceler√°-lo
** Rota√ß√£o de Corpos R√≠gidos
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
- Para descrever o movimento de rota√ß√£o, descrevemos um /racioc√≠nio an√°logo/
- Da mesma maneira que t√≠nhamos uma dada velocidade \(v\) para a
  transla√ß√£o, teremos uma *{{{yellow(velocidade angular
  \(\omega\))}}}* para a rota√ß√£o
- No caso de rota√ß√£o, *as velocidades \(v_i\) s√£o distintas*
** Rota√ß√£o de Corpos R√≠gidos
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
- Associa-se a um corpo em rota√ß√£o uma "quantidade de movimento
  angular" - formalmente chamada de /{{{yellow(momentum)}}}/ {{{yellow(angular \(L\))}}}
- \(L = I\omega\)
- \(I\) √© seu *momento de in√©rcia*
** Rota√ß√£o de Corpos R√≠gidos
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
- Por analogia,
  - \(\tau = \frac{\mathrm{d}L}{\mathrm{d}t}=I\alpha\)
- \(\tau\) √© o torque, \(\alpha\) √© a acelera√ß√£o angular
** Rota√ß√£o de Corpos R√≠gidos
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
- As representa√ß√µes da \(2^{\text{a}}\) lei de Newton para um corpo r√≠gido em
  transla√ß√£o e rota√ß√£o s√£o *matematicamente equivalentes*
- Assim como \(M \leftrightarrow\) dificuldade de alterar \(p\), \(I
  \leftrightarrow\) dificuldade de alterar \(L\)

** Rela√ß√µes de grandezas
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
#+attr_html: :border 3 :frame border :rules all
|-----------------------+-----------------+--------------------|
| Grandeza              | Transla√ß√£o      | Rota√ß√£o            |
|-----------------------+-----------------+--------------------|
| In√©rcia               | \(M\)           | \(I\)              |
| Deslocamento          | \(s=r\theta\)   | \(\theta\)         |
| Velocidade            | \(v=r\omega\)   | \(\omega\)         |
| Acelera√ß√£o            | \(a=r\alpha\)   | \(\alpha\)         |
| /Momentum/            | \(p=mv\)        | \(L=I\omega\)      |
| \(2^{\text{a}}\) lei de Newton | \(F = \dot{p}\) | \(\tau = \dot{L}\) |
|-----------------------+-----------------+--------------------|

* C√°lculo do Momento de In√©rcia

** \(I\): caso discreto
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:

No caso em que o corpo √© constitu√≠do de \(N\) part√≠culas, temos
\begin{align*}
I = \sum_{i=1}^N m_ir^2_i
\end{align*}
** \(I\): caso cont√≠nuo
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:

Em contrapartida, para um corpo cont√≠nuo, a express√£o anterior se
torna um limite do cont√≠nuo:
\begin{align*}
I = \int r^2 \mathrm{d}m
\end{align*}
O momento de in√©rcia passa a depender da {{{yellow(geometria)}}} do
corpo em quest√£o.
** \(I\): caso cont√≠nuo
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
[[file:../img/tSk7oX.png]]

** \(I\): caso cont√≠nuo
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
- Em geral, os momentos de in√©rcia s√£o dif√≠ceis de se calcular para
  figuras n√£o regulares, mas t√™m a forma
  \begin{align*}
  I &= CMr^2
  \end{align*}
- \(C\) depende da {{{yellow(geometria)}}} do corpo
  
** Teorema de Steiner
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
- A defini√ß√£o a partir da integral √© sempre v√°lida, mas dif√≠cil de se
  calcular, principalmente em rela√ß√£o a eixos arbitr√°rios.
- Para isso, contamos com o *{{{yellow(Teorema dos Eixos Paralelos)}}}*.
** Teorema de Steiner
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
- Se conhecemos o momento de in√©rcia \(I_{cm}\) de um eixo que passa
  pelo centro de massa, o momento de in√©rcia em rela√ß√£o a um eixo
  paralelo pode ser calculado
  
#+attr_html: :width 350
[[file:../img/PiJLj9.png]] 
** Teorema de Steiner
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
  
#+attr_html: :width 300
[[file:../img/PiJLj9.png]] 
\begin{align*}
I = I_{cm} + M\ell^2
\end{align*}
** Objetivos do M√≥dulo 3
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
- Determinar experimentalmente o momento de in√©rcia de corpos com
  geometrias regulares e irregulares
** Objetivos do M√≥dulo 3
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
- Determinar experimentalmente o momento de in√©rcia de corpos com
  geometrias regulares e irregulares
- Determinar experimentalmente a constante adimensional \(C\) para
  corpos de geometria regular e compar√°-la com a previs√£o te√≥rica para
  a geometria esperada

** Objetivos do M√≥dulo 3
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
- Determinar experimentalmente o momento de in√©rcia de corpos com
  geometrias regulares e irregulares
- Determinar experimentalmente a constante adimensional \(C\) para
  corpos de geometria regular e compar√°-la com a previs√£o te√≥rica para
  a geometria esperada
- Valida√ß√£o do m√©todo experimental empregado visando a determina√ß√£o do
  momento de in√©rcia de corpos com formatos arbitr√°rios

** Objetivos do M√≥dulo 3
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
*Equipamentos dispon√≠veis*
- Suporte para equil√≠brio de corpos
- Corpos com diferentes massas e geometrias
- Trena
- Paqu√≠metro anal√≥gico
- Micr√¥metro anal√≥gico
- Cron√¥metro digital
- Balan√ßa digital de precis√£o
- Trip√© para filmagem

  
** Sistema girante
[[file:../img/9Mgc3J.png]] 

* O p√™ndulo f√≠sico
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
[[file:img/JuQ1Em.png]]
** O p√™ndulo f√≠sico
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
[[file:../img/LZjbQI.png]]
** O p√™ndulo f√≠sico
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
#+attr_html: :width 200
[[file:../img/LZjbQI.png]]
- P√™ndulo f√≠sico de massa \(m\), momento de in√©rcia \(I\) ao redor do piv√¥ \(O\)
- Centro de massa est√° a \(L\) de \(O\)
- Quando oscila, deslocamento dado pelo √¢ngulo {{{yellow(\(\theta\))}}}
** O p√™ndulo f√≠sico
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
#+attr_html: :width 200
[[file:../img/LZjbQI.png]]
- Na posi√ß√£o indicada pela figura, *{{{yellow(torque restaurador \(\tau\))}}}*
  + \(\tau = r_{\perp} F = -L [mg\sin(\theta)]\)
- Dire√ß√£o positiva se afasta da vertical
** O p√™ndulo f√≠sico
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
- \(\tau = r_{\perp} F = -L [mg\sin(\theta)]\)
  
- \(2^{\text{a}}\) lei de Newton para rota√ß√µes:
  + \(\tau_R = \dot{L} = I\alpha = I \frac{\mathrm{d}^2\theta}{\mathrm{d}t^2}\)
** O p√™ndulo f√≠sico
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
Unimos as equa√ß√µes
- \(\tau = r_{\perp} F = -L [mg\sin(\theta)]\)
- \(\tau_R = \dot{L} = I\alpha = I \frac{\mathrm{d}^2\theta}{\mathrm{d}t^2}\)
  em
- \(I \ddot{\theta} = - mgL \sin(\theta)\)
** O p√™ndulo f√≠sico
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
#+attr_reveal: :frag (none none none appear) :frag_idx (1 2 3 4)
+ \(I \ddot{\theta} = - mgL \sin(\theta)\)
+ \(I \ddot{\theta} + mgL \sin(\theta) = 0\)
+ \(\ddot{\theta} + \frac{mgL}{I} \sin(\theta) = 0\)
+ ‚ö†Ô∏è *{{{yellow(COMPLICADO)}}}* ‚ö†Ô∏è
** O p√™ndulo f√≠sico
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
#+attr_reveal: :frag (none none none appear) :frag_idx (1 2 3 4)
- \(\ddot{\theta} + \frac{mgL}{I} \sin(\theta) = 0\)
As solu√ß√µes exatas dessa equa√ß√£o v√™m de uma coisa chamada *integral el√≠ptica*
- Por sorte, podemos utilizar a expans√£o
  + \(\sin(\theta)\approx\theta-\frac{\theta^3}{3!}+\frac{\theta^5}{5!}-\dots\)

** O p√™ndulo f√≠sico
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
- \(\sin(\theta)\approx\theta-\frac{\theta^3}{3!}+\frac{\theta^5}{5!}-\dots\)

  #+begin_src jupyter-python :exports none
    import numpy as np
    import plotly.express as px
    import plotly.graph_objects as go
    import plotly.io as pio

    theta = np.linspace(0, np.pi/2, 100)
  #+end_src

  #+RESULTS:

#+begin_src jupyter-python :results output :file "img/sin_theta_vs_theta.html" :exports none
  p = go.Figure()
  p.add_trace(go.Scatter(x=theta, y=np.sin(theta), mode='lines', name='sin Œ∏'))
  p.add_trace(go.Scatter(x=theta, y=theta, mode='lines', name='Œ∏'))
  p.add_trace(go.Scatter(x=theta, y=theta - theta**3/6, mode='lines', name='Œ∏ -  Œ∏^3/6'))
  p.update_layout(
      title="Respostas do seno em fun√ß√£o do √¢ngulo",
      xaxis_title="√Çngulo (rad)",
      legend=dict(
          x=1.02,   # ligeiramente fora da √°rea principal
          y=0.5,
          xanchor='left',
          yanchor='middle',
          bgcolor='rgba(255,255,255,0.6)',
          font=dict(size=16),
      ),
      margin=dict(r=100),  # üîπ adiciona margem √† direita
  )
  # salva o gr√°fico como HTML interativo independente
  pio.write_html(p, file="img/sin_theta_vs_theta.html", include_plotlyjs='cdn', full_html=False)
#+end_src

#+RESULTS:
#+REVEAL_HTML: <iframe src="../img/sin_theta_vs_theta.html" width="800" height="500"></iframe>

** O p√™ndulo f√≠sico
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
- Com a aproxima√ß√£o \(\sin(\theta)\approx\theta\), para
  \(\theta<6^{\circ}\), temos
#+attr_reveal: :frag (none appear appear appear) :frag_idx (1 2 3 4)
  + \(\frac{\mathrm{d}^2\theta}{\mathrm{d}t^2} + \omega_0^2\theta = 0\)
  + \(\omega_{0} = \sqrt{\frac{mgL}{I}}\)
  + \(\omega_0 = \frac{2\pi}{T}\)
  + \(T = 2\pi \sqrt{\frac{I}{mgL}}\)
    
** O p√™ndulo f√≠sico
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
*Equa√ß√£o de movimento*    

\(\theta(t) = \theta_0\cos(\omega_0t+\phi)\)
#+begin_src jupyter-python :results output :file "img/multiple_phi_slider.html" :exports none
  t = np.linspace(0, 5, 1000)
  w0 = 2*np.pi
  theta = w0*t

  phi_steps = np.linspace(0, np.pi, 3)

  p = go.Figure()
  for phi in phi_steps:
      p.add_trace(go.Scatter(x=theta, y=np.cos(theta + phi), mode='lines', name=f'phi={phi}'))

  p.update_layout(
    title="Œ∏(t) variando a fase",
    xaxis_title="Tempo (s)",
    legend=dict(
        x=1.02,   # ligeiramente fora da √°rea principal
        y=0.5,
        xanchor='left',
        yanchor='middle',
        bgcolor='rgba(255,255,255,0.6)',
        font=dict(size=16),
    ),
    margin=dict(r=100),  # üîπ adiciona margem √† direita
  )
  pio.write_html(p, file="img/multiple_phi_slider.html", include_plotlyjs='cdn', full_html=True)
#+end_src

#+RESULTS:

#+REVEAL_HTML: <iframe src="../img/multiple_phi_slider.html" width="900" height="500"></iframe>
** O p√™ndulo f√≠sico
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
*Equa√ß√£o de movimento*

\(\theta(t) = \theta_0\cos(\omega_0t+\phi)\)
- Solu√ß√£o harm√¥nica, movimento de per√≠odo \(T = 2\pi/\omega_0\)
- Uma an√°lise mais realista mostra que a amplitude \(\theta_0\) √©
  mantida constante durante um breve per√≠odo de tempo de oscila√ß√£o
- H√° dissipa√ß√£o de energia durante o movimento

** O p√™ndulo f√≠sico
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
*Equa√ß√£o de movimento*

\(\theta(t) = \theta_0 e^{-\frac{\gamma}{2}t} \cos(\omega't+\phi)\)
- \(\gamma\) denota perdas por atrito
- \(\omega' = \sqrt{\omega_0^2 - \frac{\gamma^2}{4}}\) √© a frequ√™ncia amortecida
- Se \(\gamma\) √© muito pequeno \(10^{-4}\), \(\omega'\approx\omega_0\)
** O p√™ndulo f√≠sico - baixo amortecimento
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
*Equa√ß√£o de movimento*

\(\theta(t) = \theta_0 e^{-\frac{\gamma}{2}t} \cos(\omega_{0}t+\phi)\)
- A partir da determina√ß√£o do per√≠odo de oscila√ß√£o, pode-se determinar
  experimentalmente o momento de in√©rcia do corpo no eixo de rota√ß√£o
  do piv√¥:
  \begin{align*}
  I= \frac{mgLT^{2}}{4\pi^2}
  \end{align*}
- Teorema de Steiner:
  \[I_{CM} = mL^2 \left( \frac{gT^2}{4\pi^2L}-1 \right)\]
** O p√™ndulo f√≠sico - baixo amortecimento
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:
*Equa√ß√£o de movimento*

\(\theta(t) = \theta_0 e^{-\frac{\gamma}{2}t} \cos(\omega_{0}t+\phi)\)
- Teorema de Steiner:
  \[I_{CM} = mL^2 \left( \frac{gT^2}{4\pi^2L}-1 \right)\]
* Vars                                                             :noexport:
# Local variables:
# eval: (setq org-image-actual-width 350)
# eval: (setq org-image-align 'center)
# End:
